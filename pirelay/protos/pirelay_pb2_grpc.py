# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import pirelay_pb2 as protos_dot_pirelay__pb2


class PiRelayStub(object):
  """The greeting service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Enable = channel.unary_unary(
        '/pirelay.PiRelay/Enable',
        request_serializer=protos_dot_pirelay__pb2.PiRelayChannel.SerializeToString,
        response_deserializer=protos_dot_pirelay__pb2.PiRelaysAnswer.FromString,
        )
    self.Disable = channel.unary_unary(
        '/pirelay.PiRelay/Disable',
        request_serializer=protos_dot_pirelay__pb2.PiRelayChannel.SerializeToString,
        response_deserializer=protos_dot_pirelay__pb2.PiRelaysAnswer.FromString,
        )


class PiRelayServicer(object):
  """The greeting service definition.
  """

  def Enable(self, request, context):
    """Sends a greeting
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Disable(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PiRelayServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Enable': grpc.unary_unary_rpc_method_handler(
          servicer.Enable,
          request_deserializer=protos_dot_pirelay__pb2.PiRelayChannel.FromString,
          response_serializer=protos_dot_pirelay__pb2.PiRelaysAnswer.SerializeToString,
      ),
      'Disable': grpc.unary_unary_rpc_method_handler(
          servicer.Disable,
          request_deserializer=protos_dot_pirelay__pb2.PiRelayChannel.FromString,
          response_serializer=protos_dot_pirelay__pb2.PiRelaysAnswer.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'pirelay.PiRelay', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
